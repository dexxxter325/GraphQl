package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"GRAPHQL/graph/model"
	"context"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.User, error) {
	return r.services.Register(ctx, input)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.Login, error) {
	return r.services.Login(ctx, input)
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context, id string) (bool, error) {
	return r.services.Logout(ctx, id)
}

// AddCar is the resolver for the addCar field.
func (r *mutationResolver) AddCar(ctx context.Context, input model.CarInput) (*model.Car, error) {
	return r.services.AddCar(ctx, input)
}

// UpdateCar is the resolver for the updateCar field.
func (r *mutationResolver) UpdateCar(ctx context.Context, id string, input model.CarInput) (*model.Car, error) {
	return r.services.UpdateCar(ctx, id, input)
}

// DeleteCar is the resolver for the deleteCar field.
func (r *mutationResolver) DeleteCar(ctx context.Context, id string) (*bool, error) {
	return r.services.DeleteCar(ctx, id)
}

// GetAllCars is the resolver for the getAllCars field.
func (r *queryResolver) GetAllCars(ctx context.Context) ([]*model.Car, error) {
	return r.services.GetAllCars(ctx)
}

// GetCarByID is the resolver for the getCarById field.
func (r *queryResolver) GetCarByID(ctx context.Context, id string) (*model.Car, error) {
	return r.services.GetCarByID(ctx, id)
}

// GetUserByID is the resolver for the getUsers field.
func (r *queryResolver) GetUserByID(ctx context.Context, userID string) (*model.User, error) {
	return r.services.GetUserByID(ctx, userID)
}

// CarPublished is the resolver for the carPublished field.
func (r *subscriptionResolver) CarPublished(ctx context.Context) (<-chan *model.Car, error) {
	return r.services.CarPublished(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
